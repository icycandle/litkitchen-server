from typing import Protocol
from .models import (
    MainDishText,
    SideDishMedia,
    DrinkStyle,
    TextVariant,
    PrintJob,
    BarcodeMapping,
)


class IMainDishTextRepository(Protocol):
    def create(self, item: MainDishText) -> MainDishText: ...
    def get(self, item_id: int) -> MainDishText | None: ...
    def update(self, item_id: int, item: MainDishText) -> bool: ...
    def delete(self, item_id: int) -> bool: ...


class ISideDishMediaRepository(Protocol):
    def create(self, item: SideDishMedia) -> SideDishMedia: ...
    def get(self, item_id: int) -> SideDishMedia | None: ...
    def update(self, item_id: int, item: SideDishMedia) -> bool: ...
    def delete(self, item_id: int) -> bool: ...


class IDrinkStyleRepository(Protocol):
    def create(self, item: DrinkStyle) -> DrinkStyle: ...
    def get(self, item_id: int) -> DrinkStyle | None: ...
    def update(self, item_id: int, item: DrinkStyle) -> bool: ...
    def delete(self, item_id: int) -> bool: ...


class ITextVariantRepository(Protocol):
    def create(self, item: TextVariant) -> TextVariant: ...
    def get(self, item_id: int) -> TextVariant | None: ...
    def update(self, item_id: int, item: TextVariant) -> bool: ...
    def delete(self, item_id: int) -> bool: ...
    def query(
        self,
        main_dish_text_id: int,
        side_dish_media_id: int,
        drink_style_id: int,
    ) -> list[TextVariant]: ...


class IPrintJobRepository(Protocol):
    def create(self, item: PrintJob) -> PrintJob: ...
    def get(self, item_id: int) -> PrintJob | None: ...
    def update(self, item_id: int, item: PrintJob) -> bool: ...
    def delete(self, item_id: int) -> bool: ...


class IBarcodeMappingRepository(Protocol):
    def create(self, item: BarcodeMapping) -> BarcodeMapping: ...
    def get(self, item_id: int) -> BarcodeMapping | None: ...
    def update(self, item_id: int, item: BarcodeMapping) -> bool: ...
    def delete(self, item_id: int) -> bool: ...
